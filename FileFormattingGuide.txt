File Format conventions:

RETURNED FROM CONTROLLER - A JSON file formatted thusly:
{
  "fields : []
  "total": #total number of records returned
  "results": []
  "moreData": #bool indicating something, not entirely sure what
  "schema": #not sure what the options are but always comes abck biz_txn_v1
}

The list in "fields" contains JSON objects representing fields thusly:
{
  "label": #fieldname
  "field": #identical to above
  "type" : #type of field, stored as a string
  OPTIONAL
  "fields": [] #if type is array, subfields are stored as a list here with the same format, minus a label 
}

The list in fields contains JSON lists, each representing a data point. One such point is a list, with its contents reprenting values. These can be strings, bools, ints, floats, or lists of nested data

The sanitizer expects a JSON file formatted as described above
RETURNED FROM SANITIZER
A Sanitized object that can return the sanitized data as a numpy array, pandas dataframe, or JSON file.
JSON is formatted according to the default spec here (default is 'columns'),  can be altered if necessary:
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html


Andres' Thing (Sorry, not sure of exactly what it does):

Machine Learning:
The RandomForest class will be initialized with Pandas Data Frame as it's only argument. The last column should contain the anomalous behavior data labeled in the following manner:
0 = normal
1 = slow
2 = ver slow
3 = error

It will build class attributes that include both a nested python dictionary and a nested json dictionary containing all of the information to create the metrics and visuals for the website. The both the python and json dictionaries are of the same form and have the same keys and values. The following documentation provides the form of the dictionaires and describe the key:value pairs:
outer keys: {'homepage':dict, 'slow':dict, 'very_slow':dict, 'error':dict}
dict['homepage'] =  {'total_count': integer indicating the total number of transactions in selected in the date range from the controller, 'anomalous_percent': float or double indicating the percent of total_count that anomalous, 
'slow_percent': float or double indicating the percent of anomalous transactions that are 'slow',
'slow_percent_total': float or double indicating the percent of total transactions that are 'very_slow',
'very_slow_percent': float or double indicating the percent of anomalous transactions that are 'slow',
'very_slow_percent_total': float or double indicating the percent of total transactions that are 'very_slow',
'error_percent': float or double indicating the percent of anomalous transactions that are 'slow',
'error_percent_total': float or double indicating the percent of total transactions that are 'very_slow',
'normal_x': list of x coordinates for all of the normal transactions, 
'normal_y': list of y coordinates for all of the normal transactions,
'slow_x': list of x coordinates for all of the slow transactions,
'slow_y': list of y coordinates for all of the slow transactions,
'very_slow_x': list of x coordinates for all of the very slow transactions,
'very_slow_y': list of y coordinates for all of the very slow transactions,
'error_x': list of x coordinates for all of the error transactions,
'error_y': list of y coordinates for all of the very slow transactions}
dict['slow'] = {'features': list of lists containing groups of features that are most highly correlated to the anomaloy of 'slow',
'thresholds': list of lists containing tupples that have the upper and lower range values for the features in 'features',
'recall': list containing the corresponding recall scores for the feature and threhold combinations in 'features' and 'thresholds'
'precision': list containing the corresponding precision scores for the feature and threhold combinations in 'features' and 'thresholds'
'f1_score': list containing the corresponding f1 scores for the feature and threhold combinations in 'features' and 'thresholds',
'accuracy': list containing the corresponding accuracy scores for the feature and threhold combinations in 'features' and 'thresholds',
'count': integer total number of transactions that are 'slow',
'other_anomaly_percent': float or double indicating the percentage of anomalous transactions that are not 'slow',
'true_p_x': list of lists containing the x coordinates of transactions that are captured by the corresponding sublist of 'features' and             'thresholds' AND that are 'slow',
'true_p_y': list of lists containing the y coordinates of transactions that are captured by the corresponding sublist of 'features' and             'thresholds' AND that are 'slow',
'false_n_x': list of lists containing the x coordinates of transactions that are NOT captured by the corresponding sublist of 'features'              and 'thresholds' AND that are 'slow',
'false_n_y': list of lists containing the y coordinates of transactions that are NOT captured by the corresponding sublist of 'features'              and 'thresholds' AND that are 'slow',
'true_n_norm_x': list of lists containing the x coordinates of transactions that are NOT captured by the corresponding sublist of                        'features' and 'thresholds' AND that are 'normal',
'true_n_norm_y': list of lists containing the y coordinates of transactions that are NOT captured by the corresponding sublist of                        'features' and 'thresholds' AND that are 'normal',
'false_p_norm_x': list of lists containing the x coordinates of transactions that are captured by the corresponding sublist of                             'features' and 'thresholds' AND that are 'normal',
'false_p_norm_y': list of lists containing the y coordinates of transactions that are captured by the corresponding sublist of                             'features' and 'thresholds' AND that are 'normal',
'true_n_other_anomaly_x': list of lists containing the x coordinates of transactions that are NOT captured by the corresponding sublist of                        'features' and 'thresholds' AND that are 'other anomaly',
'true_n_other_anomaly_y': list of lists containing the y coordinates of transactions that are NOT captured by the corresponding sublist of                        'features' and 'thresholds' AND that are 'other anomaly',
'false_p_other_anomaly_x': list of lists containing the x coordinates of transactions that are captured by the corresponding sublist of                            'features' and 'thresholds' AND that are 'other anomaly',
'false_p_other_anomaly_y': list of lists containing the y coordinates of transactions that are captured by the corresponding sublist of                            'features' and 'thresholds' AND that are 'other anomaly',
}
dict['very_slow'] = dictionary that is equal in form to dict['slow'] only with every instance of 'slow' replaced with 'very_slow',
dict['error'] = dictionary that is equal in form to dict['slow'] only with every instance of 'slow' replaced with 'error'

Node Visualizations:
